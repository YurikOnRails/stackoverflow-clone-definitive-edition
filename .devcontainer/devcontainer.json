{
  "name": "Rails App Dev Container",

  // Указываем, что для окружения используется docker-compose
  "dockerComposeFile": "compose.yaml",

  // Имя сервиса из compose.yaml, который будет основным dev-контейнером
  "service": "app",

  // ИЗМЕНЕНИЕ ЗДЕСЬ: Указываем правильный путь, который существует в контейнере.
  // Теперь VS Code будет выполнять команды в директории /workspaces,
  // куда смонтирован корень вашего проекта.
  "workspaceFolder": "/workspaces",

  // --- Команды жизненного цикла ---

  // Команда, выполняемая один раз ПОСЛЕ создания контейнера.
  // Идеально для установки зависимостей и инструментов разработки.
"postCreateCommand": "sudo chown vscode /workspaces/node_modules && gem install rubocop brakeman rspec-rails && bundle install && yarn install",

  // Команда, выполняемая КАЖДЫЙ РАЗ при запуске/перезапуске контейнера.
  // Готовит базу данных к работе.
  "postStartCommand": "bin/rails db:prepare",

  // --- Конфигурация VS Code ---
  "customizations": {
    "vscode": {
      // Рекомендуемые расширения для Rails-разработки
      "extensions": [
        "Shopify.ruby-lsp",
        "castwide.solargraph",
        "rebornix.ruby",
        "bradlc.vscode-tailwindcss",
        "esbenp.prettier-vscode",
        "eamodio.gitlens",
        "github.vscode-pull-request-github",
        "ms-azuretools.vscode-docker",
        "standard.vscode-standard" // Для vite/javascript
      ],
      // Настройки редактора для единообразия в команде
      "settings": {
        "editor.formatOnSave": true,
        "editor.tabSize": 2,
        "[ruby]": {
          "editor.defaultFormatter": "Shopify.ruby-lsp"
        },
        "ruby.useBundler": true,
        "ruby.useLanguageServer": true,
        "ruby.lint": {
          "rubocop": true
        }
      }
    }
  },

  // "Фичи" - готовые компоненты для добавления функционала.
  "features": {
    // Устанавливает Node.js (версия LTS - 20) и Yarn. Необходимо для Vite.
    "ghcr.io/devcontainers/features/node:1": {
      "version": "lts"
    },
    // Добавляет GitHub CLI
    "ghcr.io/devcontainers/features/github-cli:1": {},
    // Позволяет использовать Docker CLI внутри контейнера для управления Docker на хосте
    "ghcr.io/devcontainers/features/docker-outside-of-docker:1": {}
  },

  // Проброс портов: 3000 для Rails-сервера, 5173 для Vite dev server
  "forwardPorts": [3000, 5173],

  // Пользователь, от имени которого будет осуществляться работа в контейнере
  "remoteUser": "vscode",
  
  // Синхронизирует UID пользователя на хосте и в контейнере.
  // Решает 99% проблем с правами на файлы, созданные в контейнере.
  "updateRemoteUserUID": true
}

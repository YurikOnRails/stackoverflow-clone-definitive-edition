version: '3.8'

services:
  # 1. Основной сервис с вашим Rails-приложением
  app:
    # Собираем образ на основе нашего Dockerfile
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    
    # Монтируем код проекта в контейнер.
    # `cached` - оптимизация для macOS и Windows для ускорения работы с файлами.
    volumes:
      - ..:/workspaces:cached
      # Именованные вольюмы для кеширования зависимостей.
      # Это значительно ускоряет перезапуск и пересборку контейнера.
      - bundle_cache:/usr/local/bundle
      # ИЗМЕНЕНИЕ ЗДЕСЬ: Убрана переменная ${localWorkspaceFolderBasename}
      # Теперь путь к node_modules соответствует реальной структуре внутри контейнера.
      - node_modules:/workspaces/node_modules

    # Переменные окружения, необходимые для работы приложения.
    environment:
      # Настройки для Rails
      RAILS_ENV: development
      RAILS_LOG_TO_STDOUT: "true"
      RAILS_MAX_THREADS: 5
      
      # Настройки для JavaScript (Vite)
      NODE_ENV: development
      
      # Настройки подключения к базе данных
      DB_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password # Используйте надежный пароль или localEnv
      
      # Настройки для системных тестов (Capybara)
      SELENIUM_HOST: selenium
      CAPYBARA_SERVER_PORT: 45678

    # Запускаем контейнер от имени пользователя 'vscode' (создан в базовом образе)
    user: vscode

    # Команда, которая не дает контейнеру завершиться. VS Code подключится к нему.
    command: sleep infinity

    # Указываем, что наш сервис зависит от других
    depends_on:
      postgres:
        condition: service_healthy # Ждем, пока сервис postgres не будет полностью готов
      selenium:
        condition: service_started # Ждем, пока сервис selenium просто запустится
    
    # Все сервисы будут в одной сети для удобного взаимодействия по именам хостов
    networks:
      - development
    
    # Позволяет корректно обрабатывать сигналы завершения (Ctrl+C)
    init: true

  # 2. Сервис с базой данных PostgreSQL
  postgres:
    image: postgres:16-alpine # Используем легковесный образ
    restart: unless-stopped
    volumes:
      # Именованный вольюм для хранения данных БД между перезапусками
      - postgres_data:/var/lib/postgresql/data
    
    environment:
      # Эти переменные должны совпадать с теми, что используются в сервисе 'app'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password # Используйте тот же пароль, что и выше
      POSTGRES_DB: stackoverflow_clone_definitive_edition_development
    
    # Проверка состояния сервиса. 'app' не запустится, пока PG не будет готов.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    
    networks:
      - development

  # 3. Сервис для системных тестов (Capybara)
  selenium:
    image: selenium/standalone-chromium:latest # Образ с Chrome
    restart: unless-stopped
    shm_size: '2gb' # Выделяем больше разделяемой памяти для стабильной работы Chrome
    networks:
      - development

# Определяем именованные вольюмы, используемые выше.
# Docker будет управлять их жизненным циклом.
volumes:
  postgres_data:
  bundle_cache:
  node_modules:

# Определяем сеть для взаимодействия сервисов
networks:
  development:
